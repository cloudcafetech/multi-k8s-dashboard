apiVersion: v1
kind: Namespace
metadata:
  name: kore

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: kore-board
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clusterrolebinding-kore-board
  labels:
    app.kubernetes.io/part-of: kore-board
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kore-board
    namespace: kore

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kore-board-kubeconfig
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
data:
  config: |

---

kind: Service
apiVersion: v1
metadata:
  name: metrics-scraper
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: metrics-scraper
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: metrics-scraper
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: metrics-scraper
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: kore-board
      app.kubernetes.io/component: metrics-scraper
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: kore-board
        app.kubernetes.io/component: metrics-scraper
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'runtime/default'
    spec:
      containers:
        - name: metrics-scraper
          image: ghcr.io/kore3lab/kore-board.metrics-scraper:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "20m"
            limits:
              memory: "128Mi"
              cpu: "40m"
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          args:
            - --kubeconfig=/app/.kube/config
            - --log-level=info
            - --db-file=/app/data/metrics.db
          ports:
            - containerPort: 8000
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube
              name: kubeconfig
            - mountPath: /app/data
              name: data-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: kubeconfig
          configMap:
            name: kore-board-kubeconfig
        - name: data-volume
          emptyDir: {}
      serviceAccountName: kore-board
      nodeSelector:
        "kubernetes.io/os": linux

---

kind: Service
apiVersion: v1
metadata:
  name: backend
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: backend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3001
      protocol: TCP
      targetPort: 3001
  selector:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: backend

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: backend
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: kore-board
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: kore-board
        app.kubernetes.io/component: backend
    spec:
      containers:
        - name: backend
          image: ghcr.io/kore3lab/kore-board.backend:latest
          imagePullPolicy: IfNotPresent
          args:
            - --auth=strategy=cookie,secret=static-token,token=admin2675          
            - --kubeconfig=strategy=configmap,configmap=kore-board-kubeconfig,namespace=kore,filename=config
            - --metrics-scraper-url=http://metrics-scraper:8000
            - --terminal-url=http://terminal:3003
            - --log-level=info
          ports:
            - containerPort: 3000
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kore-board
      nodeSelector:
        "kubernetes.io/os": linux

---

kind: Service
apiVersion: v1
metadata:
  name: frontend
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: frontend
spec:
  type: NodePort
  ports:
    - name: http
      nodePort: 30070
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: frontend

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: kore-board-nginx
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
data:
  default.conf: |2-
    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log ;

        location / {
            location ~* \.(?:ico|css|js|gif|jpe?g|png|woff2)$ {
                expires 30d;
                add_header Pragma public;
                add_header Cache-Control "public";
            }
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/index.html $uri/ =404;
        }

        error_page   500 502 503 504   /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        location ~ ^/api/terminal/ws(.*)  {
            proxy_pass   http://terminal:3003;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_connect_timeout 1d;
            proxy_send_timeout 1d;
            proxy_read_timeout 1d;
        }
    
        location ~ ^/api/terminal/(.*)  {
            proxy_pass   http://terminal:3003;
            proxy_redirect              off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Real-IP $remote_addr;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header            X-Custom-Referrer $x_custom_referrer;
        }

        location ~ ^/api/(.*)  {
            proxy_pass   http://backend:3001;
            proxy_redirect              off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Real-IP $remote_addr;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header            X-Custom-Referrer $x_custom_referrer;
        }

        location ~ ^/raw/(.*)  {
            proxy_pass   http://backend:3001;
            proxy_redirect              off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Real-IP $remote_addr;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header            X-Custom-Referrer $x_custom_referrer;
        }
    }

  nginx.conf: |2-

    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        map $http_upgrade $connection_upgrade {
            default upgrade;
            '' close;
        }

        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        gzip  on;
        gzip_disable "msie6";
        gzip_comp_level 6;
        gzip_min_length 1100;
        gzip_buffers 16 8k;
        gzip_proxied any;
        gzip_types
              text/plain
              text/css
              text/js
              text/xml
              text/javascript
              application/javascript
              application/x-javascript
              application/json
              application/xml
              application/rss+xml
              image/svg+xml;

        include /etc/nginx/conf.d/*.conf;
    }

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: frontend
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: kore-board
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: kore-board
        app.kubernetes.io/component: frontend
    spec:
      containers:
        - name: frontend
          image: ghcr.io/kore3lab/kore-board.frontend:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "128Mi"
              cpu: "20m"
          ports:
            - containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /etc/nginx/conf.d/default.conf
              name: nginx-conf
              subPath: default.conf
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-conf
              subPath: nginx.conf
      serviceAccountName: kore-board
      nodeSelector:
        "kubernetes.io/os": linux
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: nginx-conf
          configMap:
            name: kore-board-nginx
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: default.conf
                path: default.conf

---

kind: Service
apiVersion: v1
metadata:
  name: terminal
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: terminal
spec:
  ports:
    - port: 3003
      targetPort: 3003
  selector:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: terminal

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: terminal
  namespace: kore
  labels:
    app.kubernetes.io/part-of: kore-board
    app.kubernetes.io/component: terminal
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: kore-board
      app.kubernetes.io/component: terminal
  template:
    metadata:
      labels:
        app.kubernetes.io/part-of: kore-board
        app.kubernetes.io/component: terminal
    spec:
      containers:
        - name: terminal
          image: ghcr.io/kore3lab/kore-board.terminal:latest
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "192Mi"
              cpu: "200m"
            limits:
              memory: "384Mi"
              cpu: "300m"
          args:
            - --kubeconfig=/app/.kube/config
            - --log-level=info
          ports:
            - containerPort: 3003
              protocol: TCP
          volumeMounts:
            - mountPath: /app/.kube
              name: kubeconfig
          securityContext:
            privileged: true
      volumes:
        - name: kubeconfig
          configMap:
            name: kore-board-kubeconfig
      serviceAccountName: kore-board
      nodeSelector:
        "kubernetes.io/os": linux
